<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wireshark on Sun Wang&#39;s Blog</title>
    <link>http://sunwxg.github.io/tags/wireshark/</link>
    <description>Recent content in Wireshark on Sun Wang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://sunwxg.github.io/tags/wireshark/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Libwireshark Decoded Data Struct</title>
      <link>http://sunwxg.github.io/post/libwireshark-decoded-data/</link>
      <pubDate>Mon, 11 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sunwxg.github.io/post/libwireshark-decoded-data/</guid>
      <description>&lt;p&gt;When using libwireshark library decoding packet, the decoded data is stored in &lt;code&gt;struct epan_dissect&lt;/code&gt;.
We can browse this struct to search or display packet data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; epan_dissect {
	&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; epan_session &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;session;
	tvbuff_t	&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;tvb;
	proto_tree	&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;tree;
	packet_info	pi;
};
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;epan_dissect-&amp;gt;tree&lt;/code&gt; points to data struct tree.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; proto_node proto_tree;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; _proto_node {
	&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; _proto_node &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first_child;
	&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; _proto_node &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;last_child;
	&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; _proto_node &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;next;
	&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; _proto_node &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;parent;
	field_info  &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;finfo;
	tree_data_t &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;tree_data;
} proto_node;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; field_info {
	header_field_info	&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;hfinfo; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/**&amp;lt; pointer to registered field information */&lt;/span&gt;
	...
	fvalue_t		 value;
} field_info;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; _header_field_info header_field_info;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; _header_field_info {
	&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;	&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;name;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/**&amp;lt; [FIELDNAME] full name of this field */&lt;/span&gt;
	&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;	&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;abbrev;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/**&amp;lt; [FIELDABBREV] abbreviated name of this field */&lt;/span&gt;
	...
};
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Every node of tree stores one information of packet.
The information includes name and value.
For example if we want to find IP source address, the name is &lt;code&gt;ip.src&lt;/code&gt;, value is like &lt;code&gt;192.168.1.1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The name is stored in &lt;code&gt;epan_dissect-&amp;gt;tree-&amp;gt;finfo-&amp;gt;hfinfo-&amp;gt;abbrev&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The value is stored in &lt;code&gt;epan_dissect-&amp;gt;tree-&amp;gt;finfo-&amp;gt;value&lt;/code&gt;.
We can use function &lt;code&gt;fvalue_to_string_repr&lt;/code&gt; to convert value to display format.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; node&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;finfo&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;hfinfo&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;abbrev;

fvalue_t fv &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; node&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;finfo&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;value;
&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; fvalue_to_string_repr(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;fv, FTREPR_DISPLAY, &lt;span style=&#34;color: #008000&#34;&gt;NULL&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After browsing the node of tree, we can print out the data of packet like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.version&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 4
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.hdr_len&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 20
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.dsfield&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 0
. . &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.dsfield.dscp&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 0
. . &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.dsfield.ecn&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 0
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.len&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 160
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.id&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 24538
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.flags&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 0
. . &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.flags.rb&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 0
. . &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.flags.df&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 0
. . &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.flags.mf&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 0
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.frag_offset&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 0
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.ttl&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 64
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.proto&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 132
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.checksum&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 15303
. . &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.checksum_good&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 0
. . &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.checksum_bad&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 0
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.src&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 10.128.228.50
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.addr&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 10.128.228.50
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.src_host&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 10.128.228.50
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.host&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 10.128.228.50
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.dst&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 10.128.229.6
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.addr&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 10.128.229.6
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.dst_host&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 10.128.229.6
. &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;ip.host&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; 10.128.229.6
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can get full source code from &lt;a href=&#34;https://github.com/sunwxg/libwireshark_decoded_data.git&#34;&gt;https://github.com/sunwxg/libwireshark_decoded_data.git&lt;/a&gt;.
If you want know how libwireshark decodes packet, you can referece another blog &lt;a href=&#34;http://sunwxg.github.io/post/use-libwireshark-decode-packet/&#34;&gt;Use libwireshark decoding PCAP files&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use libwireshark decoding PCAP files</title>
      <link>http://sunwxg.github.io/post/use-libwireshark-decode-packet/</link>
      <pubDate>Wed, 23 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sunwxg.github.io/post/use-libwireshark-decode-packet/</guid>
      <description>&lt;p&gt;We use Wireshark tool to decode IP packet and analyse signaling. If we want to write our own tool to decode packet, we can use libwireshark library.&lt;/p&gt;

&lt;p&gt;First do some initial work.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;init_process_policies();

epan_init(register_all_protocols, register_all_protocol_handoffs, &lt;span style=&#34;color: #008000&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;NULL&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/* cfile is a global varible */&lt;/span&gt;
cap_file_init(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;cfile);
cfile.filename &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; filename;

cfile.count &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
cfile.epan &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; epan_new();
cfile.epan&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;cfile;
cfile.epan&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;get_frame_ts &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; tshark_get_frame_ts;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Second read and decode packet.&lt;/p&gt;

&lt;p&gt;Function &lt;code&gt;wtap_read&lt;/code&gt; read one packet from file.&lt;/p&gt;

&lt;p&gt;Function &lt;code&gt;epan_dissect_new&lt;/code&gt; create a new &lt;code&gt;struct epan_dissect_t&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Function &lt;code&gt;epan_dissect_run&lt;/code&gt; decode packet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (wtap_read(cfile.wth, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;err, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;err_info, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;data_offset)) {

	cfile.count&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;;

	frame_data fdlocal;
	frame_data_init(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;fdlocal, cfile.count, whdr, data_offset, cum_bytes);

	edt &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; epan_dissect_new(cfile.epan, TRUE, TRUE);

	frame_data_set_before_dissect(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;fdlocal, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;cfile.elapsed_time, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;cfile.ref, cfile.prev_dis);
	cfile.ref &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;fdlocal;

	epan_dissect_run(edt, cfile.cd_t, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;(cfile.phdr), frame_tvbuff_new(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;fdlocal, buf), &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;fdlocal, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;cfile.cinfo);

	frame_data_set_after_dissect(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;fdlocal, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;cum_bytes);
	cfile.prev_cap &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; cfile.prev_dis &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; frame_data_sequence_add(cfile.frames, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;fdlocal);

	&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//free space&lt;/span&gt;
	frame_data_destroy(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;fdlocal);

	&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;edt_r &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; edt;
	&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; TRUE;
}
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; FALSE;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Print out packet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/* print out as XML format */&lt;/span&gt;
proto_tree_write_pdml(edt, stdout);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/* print out as TEXT format */&lt;/span&gt;
proto_tree_print(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;print_args, edt, print_stream);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Release memory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;epan_dissect_free(edt);
edt &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;NULL&lt;/span&gt;;

free_frame_data_sequence(cfile.frames);
cfile.frames &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;NULL&lt;/span&gt;;

wtap_close(cfile.wth);
cfile.wth &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;NULL&lt;/span&gt;;

epan_free(cfile.epan);

epan_cleanup();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;My source code is on &lt;a href=&#34;https://github.com/sunwxg/decode_by_libwireshark&#34;&gt;github&lt;/a&gt;. You can follow the guide to run and debug.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>