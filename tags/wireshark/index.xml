<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wireshark on Sun Wang&#39;s Blog</title>
    <link>http://sunwxg.github.io/tags/wireshark/</link>
    <description>Recent content in Wireshark on Sun Wang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://sunwxg.github.io/tags/wireshark/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Libwireshark Decoded Data Struct</title>
      <link>http://sunwxg.github.io/post/libwireshark-decoded-data/</link>
      <pubDate>Mon, 11 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sunwxg.github.io/post/libwireshark-decoded-data/</guid>
      <description>&lt;p&gt;When using libwireshark library decoding packet, the decoded data is stored in &lt;code&gt;struct epan_dissect&lt;/code&gt;.
We can browse this struct to search or display packet data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct epan_dissect {
	struct epan_session *session;
	tvbuff_t	*tvb;
	proto_tree	*tree;
	packet_info	pi;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;epan_dissect-&amp;gt;tree&lt;/code&gt; points to data struct tree.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef proto_node proto_tree;
typedef struct _proto_node {
	struct _proto_node *first_child;
	struct _proto_node *last_child;
	struct _proto_node *next;
	struct _proto_node *parent;
	field_info  *finfo;
	tree_data_t *tree_data;
} proto_node;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;typedef struct field_info {
	header_field_info	*hfinfo; /**&amp;lt; pointer to registered field information */
	...
	fvalue_t		 value;
} field_info;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;typedef struct _header_field_info header_field_info;
struct _header_field_info {
	const char	*name;    /**&amp;lt; [FIELDNAME] full name of this field */
	const char	*abbrev;  /**&amp;lt; [FIELDABBREV] abbreviated name of this field */
	...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every node of tree stores one information of packet.
The information includes name and value.
For example if we want to find IP source address, the name is &lt;code&gt;ip.src&lt;/code&gt;, value is like &lt;code&gt;192.168.1.1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The name is stored in &lt;code&gt;epan_dissect-&amp;gt;tree-&amp;gt;finfo-&amp;gt;hfinfo-&amp;gt;abbrev&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The value is stored in &lt;code&gt;epan_dissect-&amp;gt;tree-&amp;gt;finfo-&amp;gt;value&lt;/code&gt;.
We can use function &lt;code&gt;fvalue_to_string_repr&lt;/code&gt; to convert value to display format.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const char *name = node-&amp;gt;finfo-&amp;gt;hfinfo-&amp;gt;abbrev;

fvalue_t fv = node-&amp;gt;finfo-&amp;gt;value;
char *value = fvalue_to_string_repr(&amp;amp;fv, FTREPR_DISPLAY, NULL);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After browsing the node of tree, we can print out the data of packet like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ip]
. [ip.version] 4
. [ip.hdr_len] 20
. [ip.dsfield] 0
. . [ip.dsfield.dscp] 0
. . [ip.dsfield.ecn] 0
. [ip.len] 160
. [ip.id] 24538
. [ip.flags] 0
. . [ip.flags.rb] 0
. . [ip.flags.df] 0
. . [ip.flags.mf] 0
. [ip.frag_offset] 0
. [ip.ttl] 64
. [ip.proto] 132
. [ip.checksum] 15303
. . [ip.checksum_good] 0
. . [ip.checksum_bad] 0
. [ip.src] 10.128.228.50
. [ip.addr] 10.128.228.50
. [ip.src_host] 10.128.228.50
. [ip.host] 10.128.228.50
. [ip.dst] 10.128.229.6
. [ip.addr] 10.128.229.6
. [ip.dst_host] 10.128.229.6
. [ip.host] 10.128.229.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can get full source code from &lt;a href=&#34;https://github.com/sunwxg/libwireshark_decoded_data.git&#34;&gt;https://github.com/sunwxg/libwireshark_decoded_data.git&lt;/a&gt;.
If you want know how libwireshark decodes packet, you can referece another blog &lt;a href=&#34;http://sunwxg.github.io/post/use-libwireshark-decode-packet/&#34;&gt;Use libwireshark decoding PCAP files&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use libwireshark decoding PCAP files</title>
      <link>http://sunwxg.github.io/post/use-libwireshark-decode-packet/</link>
      <pubDate>Wed, 23 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sunwxg.github.io/post/use-libwireshark-decode-packet/</guid>
      <description>&lt;p&gt;We use Wireshark tool to decode IP packet and analyse signaling. If we want to write our own tool to decode packet, we can use libwireshark library.&lt;/p&gt;

&lt;p&gt;First do some initial work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;init_process_policies();

epan_init(register_all_protocols, register_all_protocol_handoffs, NULL, NULL);

/* cfile is a global varible */
cap_file_init(&amp;amp;cfile);
cfile.filename = filename;

cfile.count = 0;
cfile.epan = epan_new();
cfile.epan-&amp;gt;data = &amp;amp;cfile;
cfile.epan-&amp;gt;get_frame_ts = tshark_get_frame_ts;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second read and decode packet.&lt;/p&gt;

&lt;p&gt;Function &lt;code&gt;wtap_read&lt;/code&gt; read one packet from file.&lt;/p&gt;

&lt;p&gt;Function &lt;code&gt;epan_dissect_new&lt;/code&gt; create a new &lt;code&gt;struct epan_dissect_t&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Function &lt;code&gt;epan_dissect_run&lt;/code&gt; decode packet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;if (wtap_read(cfile.wth, &amp;amp;err, &amp;amp;err_info, &amp;amp;data_offset)) {

	cfile.count++;

	frame_data fdlocal;
	frame_data_init(&amp;amp;fdlocal, cfile.count, whdr, data_offset, cum_bytes);

	edt = epan_dissect_new(cfile.epan, TRUE, TRUE);

	frame_data_set_before_dissect(&amp;amp;fdlocal, &amp;amp;cfile.elapsed_time, &amp;amp;cfile.ref, cfile.prev_dis);
	cfile.ref = &amp;amp;fdlocal;

	epan_dissect_run(edt, cfile.cd_t, &amp;amp;(cfile.phdr), frame_tvbuff_new(&amp;amp;fdlocal, buf), &amp;amp;fdlocal, &amp;amp;cfile.cinfo);

	frame_data_set_after_dissect(&amp;amp;fdlocal, &amp;amp;cum_bytes);
	cfile.prev_cap = cfile.prev_dis = frame_data_sequence_add(cfile.frames, &amp;amp;fdlocal);

	//free space
	frame_data_destroy(&amp;amp;fdlocal);

	*edt_r = edt;
	return TRUE;
}
return FALSE;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Print out packet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;/* print out as XML format */
proto_tree_write_pdml(edt, stdout);

/* print out as TEXT format */
proto_tree_print(&amp;amp;print_args, edt, print_stream);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Release memory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;epan_dissect_free(edt);
edt = NULL;

free_frame_data_sequence(cfile.frames);
cfile.frames = NULL;

wtap_close(cfile.wth);
cfile.wth = NULL;

epan_free(cfile.epan);

epan_cleanup();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My source code is on &lt;a href=&#34;https://github.com/sunwxg/decode_by_libwireshark&#34;&gt;github&lt;/a&gt;. You can follow the guide to run and debug.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>